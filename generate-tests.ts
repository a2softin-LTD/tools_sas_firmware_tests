import * as fs from 'fs';
import * as path from 'path';
import { getConfigurationFromFile } from "./src/utils/getConfigurationFromFile";
import { SimpleUserModel } from "./api/models/UserModel";

// Reading data from JSON-file
const testData = getConfigurationFromFile();

// Test template
const generateTest = (userObject: SimpleUserModel) => {
    let testNumber: number = 1;

    for (const deviceIdHex of userObject["deviceIdsHex"]) {

        return `
        test('[MPX] #${testNumber++}. Device="${deviceIdHex}" - success upgrade a device', { tag: '@sas_upgrade_async_single_user_multiple_devices_json' }, async ({ request }) => {
            const deviceIdsDec: number[] = PanelConvertersUtil.serialToDec(deviceIdHex);
            
            let channel: string;
            let oldVersion: string;
            let overallTestInfo: ReportModel[] = [];
        
            console.log("I. TEST PROGRESS");
            console.log();

            const totalTestStartTime: number = moment().valueOf();
            
            // Main block
            const testResults: ReportModel =  await singleUserMultipleDevicesUpdater(
                request,
                userObject.user,
                userObject.versions.filter(Boolean).join(','),
                userObject.deviceIdHex,
                userObject.cycle,
                deviceIdsDec,
            );
            
            console.log("Overall test finished at " + moment().format('LTS') + ");
            
            const totalTestFinishTime: number = moment().valueOf();
            const testDate: string = moment().format('YYYY-MM-DD');
            const serialNumberHex: string[] = deviceIdHex;
            const totalTime: number = Math.round(100 * (totalTestFinishTime - totalTestStartTime) / 1000) / 100;
            const connectionChannel: string = testResults.connectionChannel;
            const upgradeIterationAmount: number = userObject.cycle;
            
            reports(
                testDate,
                serialNumberHex,
                totalTime,
                connectionChannel,
                upgradeIterationAmount,
                overallTestInfo,
            );
        });`;
    }
};

// Generating spec-file for each test set
testData.forEach((userObject: SimpleUserModel, index: number) => {
    const fileName = `upgrade-firmware-test-${index + 1}-${userObject["user"].email.replace(/[^a-zA-Z]/g, "")}.spec.ts`;

    const testContent = `
    import { test } from "@playwright/test";
    import { getSingleFirmwareVersion } from "../../../ws/FirmwareVersionConfig";
    import { PanelConvertersUtil } from "../../../src/utils/converters/panel-converters.util";
    import { getConfigurationFromFile } from "../../../src/utils/getConfigurationFromFile";
    import { reports } from "../../../src/utils/reports";
    import { ReportModel } from "../../../models/ReportModel";
    import { singleUserMultipleDevicesUpdater } from "../../../utils/updaterTools";
    import moment = require("moment");

    ${generateTest(userObject)};
`;

    fs.writeFileSync(path.join('.specs/global/autogenerated', fileName), testContent);
    console.log(`Generated a file: ${fileName}`);
});